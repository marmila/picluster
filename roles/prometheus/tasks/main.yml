---
- name: Create prometheus namespace.
  kubernetes.core.k8s:
    name: "{{ k3s_monitoring_namespace }}"
    api_version: v1
    kind: Namespace
    state: present

- name: Add prometheus community chart repo.
  kubernetes.core.helm_repository:
    name: prometheus-community
    repo_url: "https://prometheus-community.github.io/helm-charts"

- name: Deploy prometheus-stack Helm chart.
  kubernetes.core.helm:
    name: kube-prometheus-stack
    chart_ref: prometheus-community/kube-prometheus-stack
    release_namespace: "{{ k3s_monitoring_namespace }}"
    update_repo_cache: true
    state: present
    release_values:
      alertmanager:
        alertmanagerSpec:
          storage:
            volumeClaimTemplate:
              spec:
                storageClassName: "{{ prometheus_storage_class }}"
                accessModes: ["ReadWriteOnce"]
                resources:
                  requests:
                    storage: "{{ prometheus_storage_size }}"
      prometheus:
        prometheusSpec:
          storageSpec:
            volumeClaimTemplate:
              spec:
                storageClassName: "{{ prometheus_storage_class }}"
                accessModes: ["ReadWriteOnce"]
                resources:
                  requests:
                    storage: "{{ prometheus_storage_size }}"
      grafana:
        adminPassword: "{{ prometheus_grafana_password }}"
        plugins:
          - grafana-piechart-panel
      kubeApiServer:
        enabled: true
      kubeControllerManager:
        enabled: false
      kubeScheduler:
        enabled: false
      kubeProxy:
        enabled: false
      kubeEtcd:
        enabled: false

- name: Wait for pods to be ready
  command:
    cmd: "kubectl wait --for=condition=Ready pod --namespace={{ k3s_monitoring_namespace }} --all --timeout=600s"
  register: prometheus_pods_ready
  changed_when: false

- name: Create metrics services (K3s and Minio)
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'templates/' + item ) }}"
    state: present
  with_items:
    - k3s_service_metrics.yml.j2
    - minio_service_metrics.yml.j2

- name: Generate minio prometheus bearer token
  include_tasks: tasks/create_minio_bearer_token.yml
  args:
    apply:
      delegate_to: node1
      become: false

- name: Create Ingress rule for Prometheus, Alertmanager and Graphana UI
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'templates/' + item ) }}"
    state: present
  with_items:
    - prometheus_ingress.yml.j2
    - grafana_ingress.yml.j2
    - alertmanager_ingress.yml.j2

- name: Configure Service Monitors
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'templates/' + item ) }}"
    state: present
  with_items:
    - traefik_servicemonitor.yml.j2
    - longhorn_servicemonitor.yml.j2
    - k3s_servicemonitor.yml.j2
    - velero_servicemonitor.yml.j2
    - minio_servicemonitor.yml.j2

- name: Configure Grafana Dashboards
  include_tasks: configure_grafana_dashboards.yml
  vars:
    dashboard_name: "{{ item | basename | splitext | first }}"
    dashboard_file:
      name: "{{ item | basename }}"
      content: "{{ lookup('file', item ) | string }}"
  with_fileglob:
    - "files/*"
