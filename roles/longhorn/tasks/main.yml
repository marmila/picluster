---
- name: Create longhorn namespace.
  kubernetes.core.k8s:
    name: "{{ k3s_longhorn_namespace }}"
    api_version: v1
    kind: Namespace
    state: present

- name: Add rancher chart repo.
  kubernetes.core.helm_repository:
    name: longhorn
    repo_url: "https://charts.longhorn.io"

- name: Deploy Longhorn enabling S3 backup
  block:
    - name: Create Minio S3 secret
      include_tasks: create_minio_s3_secret.yml
    - name: Deploy LongHorn Helm chart with S3 backup.
      kubernetes.core.helm:
        name: longhorn
        chart_ref: longhorn/longhorn
        update_repo_cache: true
        release_namespace: "{{ k3s_longhorn_namespace }}"
        state: present
        release_values:
          defaultSettings:
            defaultDataPath: "/storage"
            backupTarget: "s3://{{ minio_longhorn_bucket }}@{{ minio_site_region }}/"
            backupTargetCredentialSecret: minio-secret
  when: longhorn_s3_backup

- name: Deploy LongHorn Helm chart without S3 backup.
  kubernetes.core.helm:
    name: longhorn
    chart_ref: longhorn/longhorn
    update_repo_cache: true
    release_namespace: "{{ k3s_longhorn_namespace }}"
    state: present
    release_values:
      defaultSettings:
        defaultDataPath: "/storage"
  when: not longhorn_s3_backup


- name: Wait for pods to be ready
  command:
    cmd: "kubectl wait --for=condition=Ready pod --namespace={{ k3s_longhorn_namespace }} --all --timeout=600s"
  register: longhorn_pods_ready
  changed_when: false

- name: Repeat task since more pods are created
  command:
    cmd: "kubectl wait --for=condition=Ready pod --namespace={{ k3s_longhorn_namespace }} --all --timeout=600s"
  register: longhorn_pods_ready
  changed_when: false

- name: Create Ingress rule for Longhorn UI and Recurring backup job
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'templates/' + item ) }}"
    state: present
  with_items:
    - longhorn_ingress.yml.j2
    - longhorn_backup_job.yml.j2

- name: Patching Local-path storage resource. Set it as non-default
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: StorageClass
      metadata:
        name: local-path
        annotations:
          storageclass.kubernetes.io/is-default-class: "false"
      state: present
