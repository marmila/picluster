---
# kube-prometheus-stack helm chart values

prometheusOperator:
{% if enable_linkerd is sameas true %}
  # Disable linkerd injection for admission webhooks jobs
  admissionWebhooks:
    patch:
      podAnnotations:
        linkerd.io/inject: disabled
{% endif %}
  # Relabeling job name for operator metrics
  serviceMonitor:
    relabelings:
    # Replace job value
    - sourceLabels:
      - __address__
      action: replace
      targetLabel: job
      replacement: prometheus-operator
  # Disable creation of kubelet service
  kubeletService:
    enabled: false

# Enable serviceaccount automount
prometheus-node-exporter:
  serviceAccount:
    automountServiceAccountToken: true

alertmanager:
  alertmanagerSpec:
    # Subpath /alertmanager configuration
    externalUrl: http://{{ monitoring_dns }}/alertmanager/
    routePrefix: /
    # PVC config
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: "{{ prometheus_storage_class }}"
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: "{{ prometheus_storage_size }}"
  serviceMonitor:
    relabelings:
      # Replace job value
      - sourceLabels:
        - __address__
        action: replace
        targetLabel: job
        replacement: alertmanager
prometheus:
  prometheusSpec:
    # Subpath /prometheus configuration
    externalUrl: http://{{ monitoring_dns }}/prometheus/
    routePrefix: /
    # Resources request and limits
    resources:
      requests:
        memory: {{ prometheus_mem_limit }}
      limits:
        memory: {{ prometheus_mem_limit }}
    # PVC configuration
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: "{{ prometheus_storage_class }}"
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: "{{ prometheus_storage_size }}"
  serviceMonitor:
    relabelings:
      # Replace job value
      - sourceLabels:
        - __address__
        action: replace
        targetLabel: job
        replacement: prometheus
grafana:
  # Configuring /grafana subpath
  grafana.ini:
    server:
      domain: {{ monitoring_dns }}
      root_url: "%(protocol)s://%(domain)s:%(http_port)s/grafana/"
      serve_from_sub_path: true
  # Set admin password
  adminPassword: "{{ prometheus_grafana_password }}"
  # Install required plugins
  plugins:
    - grafana-piechart-panel
  # Relabel job name of Grafana's metrics
  serviceMonitor:
    labels:
      release: kube-prometheus-stack
    relabelings:
      # Replace job value
      - sourceLabels:
        - __address__
        action: replace
        targetLabel: job
        replacement: grafana
  # Additional data source
  additionalDataSources:
  - name: Loki
    type: loki
    uid: loki
    access: proxy
    url: http://loki-gateway.{{ k3s_logging_namespace }}.svc.cluster.local
    jsonData:
      derivedFields:
        - datasourceUid: tempo
          matcherRegex: '"request_X-B3-Traceid":"(\w+)"'
          name: TraceID
          url: $${__value.raw}
  - name: Tempo
    uid: tempo
    type: tempo
    access: proxy
    url: http://tempo-query-frontend.{{ k3s_tracing_namespace }}.svc.cluster.local:3100

# Disabling monitoring of K8s services.
# Monitoring of K3S components will be configured out of kube-prometheus-stack
kubelet:
  enabled: false
kubeApiServer:
  enabled: false
kubeControllerManager:
  enabled: false
kubeScheduler:
  enabled: false
kubeProxy:
  enabled: false
kubeEtcd:
  enabled: false
# Disable K8S Prometheus Rules
# Rules for K3S components will be configured out of kube-prometheus-stack
defaultRules:
  create: true
  rules:
    etcd: false
    k8s: false
    kubeApiserverAvailability: false
    kubeApiserverBurnrate: false
    kubeApiserverHistogram: false
    kubeApiserverSlos: false
    kubeControllerManager: false
    kubelet: false
    kubeProxy: false
    kubernetesApps: false
    kubernetesResources: false
    kubernetesStorage: false
    kubernetesSystem: false
    kubeScheduler: false
