#!/usr/sbin/nft -f

# clean
flush ruleset

# Definitions
define lan_interface = {{ lan_interface }}
define wan_interface = {{ wan_interface }}
define lan_network = {{ lan_network }}
define badcast_addr = { 255.255.255.255, 224.0.0.1, 224.0.0.251 }

define forward_tcp_accept = {{ forward_tcp_accept }}
define forward_udp_accept = {{ forward_udp_accept }}
define out_tcp_accept = {{ out_tcp_accept }}
define out_udp_accept = {{ out_udp_accept }}
define in_tcp_accept = {{ in_tcp_accept }}
define in_udp_accept = {{ in_udp_accept }}

table inet filter {

        set blackhole {
		    type ipv4_addr
		    elements = $badcast_addr
	    }

        set in_tcp_accept {
		    type inet_service
		    flags interval
		    elements = $in_tcp_accept
	    }

	    set in_udp_accept {
		    type inet_service
		    flags interval
		    elements = $in_udp_accept
	    }
	    set out_tcp_accept {
	        type inet_service
		    flags interval
		    elements = $out_tcp_accept
	    }

	    set out_udp_accept {
		    type inet_service
		    flags interval
		    elements = $out_udp_accept
	    }

            set forward_tcp_accept {
		    type inet_service
		    flags interval
		    elements = $forward_tcp_accept
	    }

	    set forward_udp_accept {
		    type inet_service
		    flags interval
		    elements = $forward_udp_accept
	    }

        chain global {
		        # Accept stablished connections and drop invalid ones
		        ct state established,related accept
		        ct state invalid drop
	    } 
        chain input {
                type filter hook input priority 0; policy drop;
                jump global;
                # Accept loopback traffic
                iifname lo accept
                # Accept SSH traffic
                tcp dport ssh accept
                # Filter TCP traffic from LAN
                iifname $lan_interface udp dport @in_udp_accept accept
                # Filter UDP traffic from LAN
                iifname $lan_interface tcp dport @in_tcp_accept accept
                # Accept ICMP
                iifname $lan_interface ip protocol icmp accept
        }
        chain forward {
                type filter hook forward priority 0; policy drop;

                # TCP traffic forwarding accepting rules
                iifname $lan_interface ip saddr $lan_network oifname $wan_interface tcp dport @forward_tcp_accept accept
                iifname $wan_interface oifname $lan_interface ip daddr $lan_network tcp sport @forward_tcp_accept accept
                # UDP traffic forwarding accepting rules
                iifname $lan_interface ip saddr $lan_network oifname $wan_interface udp dport @forward_udp_accept accept
                iifname $wan_interface oifname $lan_interface ip daddr $lan_network udp sport @forward_udp_accept accept
        }
        chain output {
                # Enable all out traffic
                type filter hook output priority 0;
        }
}

# Additionnal table for Network Address Translation (NAT)
table ip nat {
        chain postrouting {
                type nat hook postrouting priority 100;
                ip saddr $lan_network oifname $wan_interface masquerade
        }
	
}