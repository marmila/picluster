# grafana helm values (base)
# Use an existing secret for the admin user.
adminUser: ""
adminPassword: ""
admin:
  existingSecret: grafana
  userKey: admin-user
  passwordKey: admin-password

# OAuth Configuration
env:
  GF_AUTH_DISABLE_LOGIN_FORM: "true"
  GF_AUTH_OAUTH_AUTO_LOGIN: "true"
  GF_AUTH_SIGNOUT_REDIRECT_URL: "https://sso.${CLUSTER_DOMAIN}/realms/picluster/protocol/openid-connect/logout?redirect_uri=https://monitoring.${CLUSTER_DOMAIN}/grafana"

envFromSecret: grafana-oidc  # Reference to the secret containing client-secret

grafana.ini:
  server:
    root_url: https://monitoring.${CLUSTER_DOMAIN}/grafana
    serve_from_sub_path: true

  auth:
    disable_login_form: true
    oauth_auto_login: true
    signout_redirect_url: https://sso.${CLUSTER_DOMAIN}/realms/picluster/protocol/openid-connect/logout?redirect_uri=https://monitoring.${CLUSTER_DOMAIN}/grafana

  auth.generic_oauth:
    enabled: true
    name: Keycloak
    client_id: grafana
    client_secret: "$__env{client-secret}"  # From grafana-oidc secret
    scopes: "openid profile email"
    auth_url: https://sso.${CLUSTER_DOMAIN}/realms/picluster/protocol/openid-connect/auth
    token_url: https://sso.${CLUSTER_DOMAIN}/realms/picluster/protocol/openid-connect/token
    api_url: https://sso.${CLUSTER_DOMAIN}/realms/picluster/protocol/openid-connect/userinfo
    allowed_domains: ${CLUSTER_DOMAIN}
    role_attribute_path: "contains(roles[*], 'admin') && 'Admin' || contains(roles[*], 'editor') && 'Editor' || 'Viewer'"
    tls_skip_verify_insecure: true  # Only for testing with self-signed certs

# Install required plugins
plugins:
  - grafana-piechart-panel

# Relabel job name of Grafana's metrics
serviceMonitor:
  enabled: true

# Data sources
datasources:
  datasources.yaml:
    apiVersion: 1
    deleteDatasources:
      - { name: Alertmanager, orgId: 1 }
      - { name: Loki, orgId: 1 }
      - { name: Prometheus, orgId: 1 }
      - { name: Tempo, orgId: 1 }
    datasources:
    - name: Prometheus
      type: prometheus
      uid: prometheus
      access: proxy
      url: http://kube-prometheus-stack-prometheus.kube-prom-stack.svc.cluster.local:9090/prometheus
      isDefault: true
    - name: Alertmanager
      type: alertmanager
      uid: alertmanager
      url: http://kube-prometheus-stack-alertmanager.kube-prom-stack.svc.cluster.local:9093/alertmanager
      jsonData:
        implementation: prometheus
    - name: Loki
      type: loki
      uid: loki
      access: proxy
      url: http://loki-read-headless.loki.svc.cluster.local:3100
      jsonData:
        derivedFields:
          - datasourceUid: tempo
            matcherRegex: '"trace_id": "(\w+)"'
            name: TraceID
            url: $${__value.raw}
    - name: Tempo
      uid: tempo
      type: tempo
      access: proxy
      url: http://tempo-query-frontend-discovery.tempo.svc.cluster.local:3100

# Provisioning sidecars
sidecar:
  dashboards:
    enabled: true
    searchNamespace: ALL
    label: grafana_dashboard
    folderAnnotation: grafana_folder
    provider:
      disableDelete: true
      foldersFromFilesStructure: true
  datasources:
    enabled: true
    searchNamespace: ALL
    label: grafana_datasource
    labelValue: "1"